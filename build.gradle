buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.ajoberstar:gradle-git:0.6.3' }
}
apply plugin: 'java'
apply plugin: 'github-pages'
ext {
    privateRepo = 'http://210.14.153.178:8081/nexus/content/groups/ailk'
    privateDeployRepo = 'http://210.14.153.178:8081/nexus/content/repositories/ailk-releases'
    deploy_username = System.getProperty('DEPLOY_USERNAME')
    deploy_password = System.getProperty('DEPLOY_PASSWORD')
    oc_version = 'och4.0.1'
    zookeeper_version = '3.4.5-cdh5.2.1'
    hadoop_common_version = '2.5.0-cdh5.2.1'
    hbase_version = '0.98.6.1' 
    hive_version = '0.13.1-cdh5.2.1'
    apache_spark_version = "1.2.0-oc" 
}

repositories {
    maven {
        url privateRepo
    }
}
configurations {
    auditor_plugin
}
dependencies {
}

def getFromMaven(src, destDir) {
    s = src.split("[:@]")
    srcUrl = "http://210.14.153.178:8081/nexus/service/local/artifact/maven/redirect?r=ailk&g=${s[0]}&a=${s[1]}&v=${s[2]}&e=${s[3]}"
    ant.echo("downloading:$srcUrl to:$destDir/${s[1]}-${s[2]}.${s[3]}")
    ant.mkdir(dir: destDir)
    ant.get(src: srcUrl, dest: "$destDir/${s[1]}-${s[2]}.${s[3]}", verbose: true)
}

task zookeeper() {
    doLast() {
        project.exec {
            workingDir 'zookeeper'
            commandLine 'ant', "-Dversion=$zookeeper_version", "-Divy.url=$privateRepo/org/apache/ivy/ivy", "clean"
        }
        project.exec {
            workingDir 'zookeeper'
            commandLine 'ant', "-Dversion=$zookeeper_version", "-Divy.url=$privateRepo/org/apache/ivy/ivy", 'tar'
        }
        ant.delete(dir: 'zookeeper/build/och')
        ant.mkdir(dir: 'zookeeper/build/och')
        project.exec {
            workingDir 'zookeeper/build'
            commandLine "tar -xvzf  zookeeper-${zookeeper_version}.tar.gz -C ./och".split().toList()
        }
        ant.move(file: "zookeeper/build/och/zookeeper-${zookeeper_version}", tofile: "zookeeper/build/och/zookeeper-${zookeeper_version}-${oc_version}")
        project.exec {
            workingDir 'zookeeper/build/och'
            commandLine "tar -cvzf zookeeper-${zookeeper_version}-${oc_version}.tar.gz zookeeper-${zookeeper_version}-${oc_version}".split().toList()
        }
        ant.mkdir(dir: "build/ochadoop")
        ant.move(file: "zookeeper/build/och/zookeeper-${zookeeper_version}-${oc_version}.tar.gz", todir: "build/ochadoop")
    }
}
task hadoop_common() {
    doLast() {
        project.exec {
            workingDir 'hadoop-common'
            commandLine 'mvn', "-Pdist,native", "-DskipTests", "-Dmaven.javadoc.skip=true", "-Dprotoc.path=" + System.getProperty('PROTOBUF_HOME', "/home/jenkins/app/protobuf-2.5.0") + "/bin/protoc", "-Dtar", "-Drequire.snappy=true", "-Dsnappy.prefix=" + System.getProperty('SNAPPY_HOME', "/home/jenkins/app/snappy-1.1.2"), "clean", "install"
        }
        ant.delete(dir: 'hadoop-common/hadoop-dist/target/och')
        ant.mkdir(dir: 'hadoop-common/hadoop-dist/target/och')
        project.exec {
            workingDir 'hadoop-common/hadoop-dist/target'
            commandLine "tar -xvzf  hadoop-${hadoop_common_version}.tar.gz -C ./och".split().toList()
        }
        ant.move(file: "hadoop-common/hadoop-dist/target/och/hadoop-${hadoop_common_version}", tofile: "hadoop-common/hadoop-dist/target/och/hadoop-${hadoop_common_version}-${oc_version}")
        project.exec {
            workingDir 'hadoop-common/hadoop-dist/target/och'
            commandLine "tar -cvzf hadoop-${hadoop_common_version}-${oc_version}.tar.gz hadoop-${hadoop_common_version}-${oc_version}".split().toList()
        }
        ant.mkdir(dir: "build/ochadoop")
        ant.move(file: "hadoop-common/hadoop-dist/target/och/hadoop-${hadoop_common_version}-${oc_version}.tar.gz", todir: "build/ochadoop")
    }
}
task hbase() {
    doLast() {
        project.exec {
            workingDir 'hbase'
            //commandLine "mvn -DskipTests -Pcdh5 -Dmaven.javadoc.skip=false -Dhadoop.profile=2.0 -Dcdh.hadoop.version=$hadoop_common_version clean install assembly:single".split().toList()
            commandLine "mvn clean install -DskipTests assembly:single -Prelease -Phadoop-2.0".split().toList()
        }
        ant.delete(dir: 'hbase/hbase-assembly/target/och')
        ant.mkdir(dir: 'hbase/hbase-assembly/target/och')
        project.exec {
            workingDir 'hbase/hbase-assembly/target'
            commandLine "tar -xvzf  hbase-${hbase_version}-bin.tar.gz -C ./och".split().toList()
        }
        ant.move(file: "hbase/hbase-assembly/target/och/hbase-${hbase_version}", tofile: "hbase/hbase-assembly/target/och/hbase-${hbase_version}-${oc_version}")
        
        //delete hadoop jars ,and replace hbase for using hadoop jar of cdh
         rootdir ="hbase/hbase-assembly/target/och/hbase-${hbase_version}-${oc_version}/"
        ant.delete{
             fileset(dir: "$rootdir/lib", includes: 'hadoop*.jar')
        }   
        ant.delete(file: "$rootdir/bin/hbase")
        ant.copy(file: "hbase-oc/bin/hbase", todir: "$rootdir/bin/")
                
        project.exec {
            workingDir 'hbase/hbase-assembly/target/och'
            commandLine "tar -cvzf hbase-${hbase_version}-${oc_version}.tar.gz hbase-${hbase_version}-${oc_version}".split().toList()
        }
        ant.mkdir(dir: "build/ochadoop")
        ant.move(file: "hbase/hbase-assembly/target/och/hbase-${hbase_version}-${oc_version}.tar.gz", todir: "build/ochadoop")
    }
}

task hive() {
    doLast() {
        project.exec {
            workingDir 'hive'
            //commandLine 'mvn', "-T", "2C", "-Dmaven.javadoc.skip=true", "-Dmaven.test.skip=true", "-Phadoop-2,dist", "-Dcdh.hadoop.version=$hadoop_common_version", "clean", 'install'
            commandLine "mvn clean install -Dmaven.javadoc.skip=true -DskipTests -Phadoop-2,dist".split().toList()
        }

        ant.delete(dir: 'hive/packaging/target/och')
        ant.mkdir(dir: 'hive/packaging/target/och')
        project.exec {
            workingDir 'hive/packaging/target'
            commandLine "tar -xvzf  apache-hive-${hive_version}-bin.tar.gz -C ./och".split().toList()
        }
        ant.move(file: "hive/packaging/target/och/apache-hive-${hive_version}-bin", tofile: "hive/packaging/target/och/hive-${hive_version}-${oc_version}")
       
       //add hive-extention
        ant.mkdir(dir:"hive/packaging/target/och/hive-${hive_version}-${oc_version}/hive-extension")
        project.exex{
            workingDir 'hive/packaging/target/och/hive-${hive_version}-${oc_version}'
            getFromMaven("com.ailk.oci.hive:hive-extension:${hive_version}-${oc_version}@jar", "hive-extension")
        }
        
        project.exec {
            workingDir 'hive/packaging/target/och'
            commandLine "tar -cvzf hive-${hive_version}-${oc_version}.tar.gz hive-${hive_version}-${oc_version}".split().toList()
        }
        ant.mkdir(dir: "build/ochadoop")
        ant.move(file: "hive/packaging/target/och/hive-${hive_version}-${oc_version}.tar.gz", todir: "build/ochadoop")
    }
}

task apache_spark() {
    doLast() {
//        project.exec {
//            workingDir 'spark'
//            commandLine './make-distribution.sh'
//        }
        project.exec {
            workingDir 'apache-spark'
//            commandLine "mvn -Dcdh.hadoop.version=$hadoop_common_version -Dcdh.protobuf.version=2.5.0 -Dcdh.hbase.version=$hbase_version clean install"
//            commandLine "mvn -e -Pyarn -Phive -Dhadoop.version=$hadoop_common_version -Dyarn.version=$hadoop_common_version -DskipTests clean install".split().toList()
            commandLine "sh make-distribution.sh --tgz --skip-java-test  -Pyarn -Phive -Phadoop-2.3 -Dhadoop.version=$hadoop_common_version -Dyarn.version=$hadoop_common_version -DskipTests ".split().toList()
            environment MAVEN_OPTS: "-Xmx4g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m"
            environment SCALA_HOME: "/home/jenkins/app/scala-2.10.3"
        }
        ant.move(file: "apache-spark/spark-${apache_spark_version}-bin-${hadoop_common_version}.tgz", tofile: "build/ochadoop/spark-${apache_spark_version}-${hadoop_common_version}.tar.gz")
    }
}

task spark() {
    doLast() {
        project.exec {
            workingDir 'spark'
//            commandLine "mvn -Dcdh.hadoop.version=$hadoop_common_version -Dcdh.protobuf.version=2.5.0 -Dcdh.hbase.version=$hbase_version clean install"
//            commandLine "mvn -e -Pyarn -Phive -Dhadoop.version=$hadoop_common_version -Dyarn.version=$hadoop_common_version -DskipTests clean install".split().toList()
            commandLine "sh make-distribution.sh --tgz --skip-java-test  -Pyarn -Phive -Phadoop-2.3 -Dhadoop.version=$hadoop_common_version -Dyarn.version=$hadoop_common_version -DskipTests ".split().toList()
            environment MAVEN_OPTS: "-Xmx4g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m"
            environment SCALA_HOME: "/home/jenkins/app/scala-2.10.3"
        }
        ant.move(file: "spark/spark-${apache_spark_version}-bin-${hadoop_common_version}.tgz", tofile: "build/ochadoop/spark-${apache_spark_version}-${hadoop_common_version}.tar.gz")
    }
}

task asiainfo_spark() {
    doLast() {
        project.exec {
            workingDir 'asiainfo-spark'
            commandLine "sh make-distribution.sh --tgz --skip-java-test  -P hbase-hadoop2,hadoop-2.3,hive-0.12.0,yarn,hive,scala-2.10,sbt,hive-thriftserver -Dhadoop.version=$hadoop_common_version -Dyarn.version=$hadoop_common_version -DskipTests ".split().toList()
            environment MAVEN_OPTS: "-Xmx4g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m"
            environment SCALA_HOME: "/home/jenkins/app/scala-2.10.3"
        }
        ant.move(file: "asiainfo-spark/spark-${apache_spark_version}-bin-${hadoop_common_version}.tgz", tofile: "build/ochadoop/spark-${apache_spark_version}-${hadoop_common_version}.tar.gz")
    }
}

task all(dependsOn: [zookeeper, hadoop_common, hbase, hive, asiainfo_spark]) {
    doLast {
        ant.mkdir(dir: "build/tar/ochadoop-${oc_version}")
        ant.move(file: "build/ochadoop", tofile: "build/tar/ochadoop-${oc_version}/ochadoop-${oc_version}")
        ant.tar(basedir: "build/tar/ochadoop-${oc_version}", destfile: "build/tar/ochadoop-${oc_version}.tar")
        ant.gzip(src: "build/tar/ochadoop-${oc_version}.tar", destfile: "build/tar/ochadoop-${oc_version}.tar.gz")
    }
}


